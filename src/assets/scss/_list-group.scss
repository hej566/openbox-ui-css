// Base class
//
// Easily usable on <ul>, <ol>, or <div>.

.list-group {
  @include border-radius($list-group-border-radius);
  display: flex;
  flex-direction: column;
  margin-bottom: 0;

  // No need to set list-style: none; since .list-group-item is block level
  padding-left: 0; // reset padding because ul and ol
}

.list-group-numbered {
  counter-reset: section;
  list-style-type: none;

  > li::before {
    // Increments only this instance of the section counter
    content: counters(section, '.') '. ';
    counter-increment: section;
  }
}

// Interactive list items
//
// Use anchor or button elements instead of `li`s or `div`s to create interactive
// list items. Includes an extra `.active` modifier class for selected items.

.list-group-item-action {
  color: $list-group-action-color;
  text-align: inherit; // For `<button>`s (anchors inherit)
  width: 100%; // For `<button>`s (anchors become 100% by default though)

  // Hover state
  &:hover,
  &:focus {
    background-color: $list-group-hover-bg;
    color: $list-group-action-hover-color;
    text-decoration: none;
    z-index: 1; // Place hover/focus items above their siblings for proper border styling
  }

  &:active {
    background-color: $list-group-action-active-bg;
    color: $list-group-action-active-color;
  }
}

// Individual list items
//
// Use on `li`s or `div`s within the `.list-group` parent.

.list-group-item {
  background-color: $list-group-bg;
  border: $list-group-border-width solid $list-group-border-color;
  color: $list-group-color;
  cursor: pointer;
  display: block;
  padding: $list-group-item-padding-y $list-group-item-padding-x;
  position: relative;
  text-decoration: if($link-decoration == none, null, none);

  &:first-child {
    @include border-top-radius(inherit);
  }

  &:last-child {
    @include border-bottom-radius(inherit);
  }

  &.disabled,
  &:disabled {
    //pointer-events: none;
    background-color: $list-group-disabled-bg;
    color: $list-group-disabled-color;
    cursor: not-allowed;
  }

  // Include both here for `<a>`s and `<button>`s
  &.active {
    background-color: $list-group-active-bg;
    border-color: $list-group-active-border-color;
    color: $list-group-active-color;
    z-index: 2; // Place active items above their siblings for proper border styling
  }

  & + & {
    border-top-width: 0;

    &.active {
      border-top-width: $list-group-border-width;
      margin-top: -$list-group-border-width;
    }
  }
}

// Horizontal
//
// Change the layout of list group items from vertical (default) to horizontal.

@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    .list-group-horizontal#{$infix} {
      flex-direction: row;

      > .list-group-item {
        &:first-child {
          @include border-bottom-start-radius($list-group-border-radius);
          @include border-top-end-radius(0);
        }

        &:last-child {
          @include border-top-end-radius($list-group-border-radius);
          @include border-bottom-start-radius(0);
        }

        &.active {
          margin-top: 0;
        }

        + .list-group-item {
          border-left-width: 0;
          border-top-width: $list-group-border-width;

          &.active {
            border-left-width: $list-group-border-width;
            margin-left: -$list-group-border-width;
          }
        }
      }
    }
  }
}

// Flush list items
//
// Remove borders and border-radius to keep list group items edge-to-edge. Most
// useful within other components (e.g., cards).

.list-group-flush {
  @include border-radius(0);

  > .list-group-item {
    border-width: 0 0 $list-group-border-width;

    &:last-child {
      border-bottom-width: 0;
    }
  }
}

// scss-docs-start list-group-modifiers
// List group contextual variants
//
// Add modifier classes to change text and background color on individual items.
// Organizationally, this must come after the `:hover` states.

@each $state, $value in $theme-colors {
  $list-group-variant-bg: shift-color($value, $list-group-item-bg-scale);
  $list-group-variant-color: shift-color($value, $list-group-item-color-scale);
  @if (contrast-ratio($list-group-variant-bg, $list-group-variant-color) < $min-contrast-ratio) {
    $list-group-variant-color: mix(
      $value,
      color-contrast($list-group-variant-bg),
      abs($list-group-item-color-scale)
    );
  }

  @include list-group-item-variant($state, $list-group-variant-bg, $list-group-variant-color);
}
// scss-docs-end list-group-modifiers
